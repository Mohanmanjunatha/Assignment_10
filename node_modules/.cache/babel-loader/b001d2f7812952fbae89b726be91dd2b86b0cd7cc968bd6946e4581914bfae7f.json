{"ast":null,"code":"var _jsxFileName = \"/Users/kabirshaikh/Desktop/assignment-10/src/Components/Weather.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport './Weather.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Weather = props => {\n  _s();\n  // const [finalDataa, setFinalData] = useState([]);\n  const {\n    dt_txt\n  } = useParams();\n  const location = useLocation();\n  console.log(location);\n\n  // const checkId = (id) => {\n  //     location.state.data.map((item) => {\n  //         if (id == item.id) {\n  //             console.log('found');\n  //             finalData.push(item);\n  //             console.log(item);\n  //         }\n  //         else {\n  //             console.log('Not found');\n  //         }\n  //     })\n  // }\n\n  // const fetchData = () => {\n  //     fetch(`http://api.openweathermap.org/geo/1.0/direct?q=Boston&limit=5&appid=7e645c5e4585ced4f48d0c5bcfc758c3`)\n  //         .then(res => res.json())\n  //         .then(result => {\n  //             fetch(`http://api.openweathermap.org/data/2.5/forecast?lat=${result[0].lat}&lon=${result[0].lon}&appid=7e645c5e4585ced4f48d0c5bcfc758c3`)\n  //                 .then(newRes => newRes.json())\n  //                 .then(newData => {\n  //                     console.log(newData.list);\n  //                     setFinalData(newData.list);\n  //                 })\n  //         })\n  // }\n\n  // useEffect(() => {\n  //     fetchData();\n  // }, []);\n\n  const checkDtText = () => {};\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(Weather, \"etfJLE3GVDM5t2lGr65c+JT2P9c=\", false, function () {\n  return [useParams, useLocation];\n});\n_c = Weather;\nexport default Weather;\nvar _c;\n$RefreshReg$(_c, \"Weather\");","map":{"version":3,"names":["React","useEffect","useState","useLocation","useParams","Weather","props","dt_txt","location","console","log","checkDtText"],"sources":["/Users/kabirshaikh/Desktop/assignment-10/src/Components/Weather.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport './Weather.css';\n\nconst Weather = (props) => {\n    // const [finalDataa, setFinalData] = useState([]);\n    const { dt_txt } = useParams();\n    const location = useLocation();\n    console.log(location);\n\n\n    \n\n    // const checkId = (id) => {\n    //     location.state.data.map((item) => {\n    //         if (id == item.id) {\n    //             console.log('found');\n    //             finalData.push(item);\n    //             console.log(item);\n    //         }\n    //         else {\n    //             console.log('Not found');\n    //         }\n    //     })\n    // }\n\n    // const fetchData = () => {\n    //     fetch(`http://api.openweathermap.org/geo/1.0/direct?q=Boston&limit=5&appid=7e645c5e4585ced4f48d0c5bcfc758c3`)\n    //         .then(res => res.json())\n    //         .then(result => {\n    //             fetch(`http://api.openweathermap.org/data/2.5/forecast?lat=${result[0].lat}&lon=${result[0].lon}&appid=7e645c5e4585ced4f48d0c5bcfc758c3`)\n    //                 .then(newRes => newRes.json())\n    //                 .then(newData => {\n    //                     console.log(newData.list);\n    //                     setFinalData(newData.list);\n    //                 })\n    //         })\n    // }\n\n    // useEffect(() => {\n    //     fetchData();\n    // }, []);\n\n    const checkDtText = () => {\n\n    }\n\n    return (\n        <div>\n            {/* {checkId(id)} */}\n            {/* {finalData.map((item) => {\n                return (\n                    <div className=\"finalWeatherWrapper\">\n                        <div className=\"finalDayWrapper\">\n                            {item.day}\n                        </div>\n                        <div className=\"finalDegreeWrapper\">\n                            {item.degrees}\n                        </div>\n                        <div className=\"finalStatusWrapper\">\n                            {item.status}\n                        </div>\n                    </div>\n                );\n            })} */}\n            {/* {finalDataa.map((item) => {\n                return (\n                    <div key={Math.random().toString()}>\n                        <div>\n                            <h2>{item.weather[0].id}</h2>\n                        </div>\n                    </div>\n                );\n            })} */}\n           \n        </div>\n    );\n}\n\nexport default Weather;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,OAAO,eAAe;AAAC;AAEvB,MAAMC,OAAO,GAAIC,KAAK,IAAK;EAAA;EACvB;EACA,MAAM;IAAEC;EAAO,CAAC,GAAGH,SAAS,EAAE;EAC9B,MAAMI,QAAQ,GAAGL,WAAW,EAAE;EAC9BM,OAAO,CAACC,GAAG,CAACF,QAAQ,CAAC;;EAKrB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,MAAMG,WAAW,GAAG,MAAM,CAE1B,CAAC;EAED,oBACI;IAAA;IAAA;IAAA;EAAA,QA2BM;AAEd,CAAC;AAAA,GAzEKN,OAAO;EAAA,QAEUD,SAAS,EACXD,WAAW;AAAA;AAAA,KAH1BE,OAAO;AA2Eb,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}